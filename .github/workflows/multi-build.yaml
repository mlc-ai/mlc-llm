name: MLC-LLM CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0' # Weekly build on Sunday at 2 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Run automated tests
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        include:
          - os: ubuntu-22.04
            cuda-version: '12.2'
          - os: windows-latest
            cuda-version: '12.2'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/conda
          ~/.cache/huggingface
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libvulkan-dev \
          vulkan-tools \
          git-lfs \
          zstd

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install git-lfs
        git lfs install

    - name: Setup Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        environment-file: .github/environment-test.yml
        activate-environment: mlc-test

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Configure build environment
      shell: bash -el {0}
      run: |
        case "${{ runner.os }}" in
          "Linux")
            echo "CMAKE_ARGS=-DUSE_CUDA=OFF -DUSE_VULKAN=ON" >> $GITHUB_ENV
            ;;
          "Windows")
            echo "CMAKE_ARGS=-DUSE_CUDA=OFF -DUSE_VULKAN=ON" >> $GITHUB_ENV
            ;;
        esac

    - name: Build MLC-LLM
      shell: bash -el {0}
      run: |
        mkdir -p build && cd build
        python ../cmake/gen_cmake_config.py
        cmake .. $CMAKE_ARGS
        cmake --build . --parallel $(nproc || echo 4)

    - name: Install MLC-LLM Python package
      shell: bash -el {0}
      run: |
        cd python
        pip install -e .

    - name: Run unit tests
      shell: bash -el {0}
      run: |
        pytest tests/unit/ -v --cov=mlc_llm --cov-report=xml

    - name: Run integration tests
      shell: bash -el {0}
      run: |
        pytest tests/integration/ -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}

  # Job 2: Build and push Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        target: development
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}-dev
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=dev
        cache-to: type=gha,mode=max,scope=dev

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=prod
        cache-to: type=gha,mode=max,scope=prod

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Build Python wheels for multiple platforms
  build-wheels:
    name: Build Wheels
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]
        include:
          - os: ubuntu-22.04
            platform_id: linux_x86_64
          - os: windows-latest
            platform_id: win_amd64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        lfs: true

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel==2.16.2

    - name: Build wheels
      run: python -m cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD: cp39-* cp310-* cp311-*
        CIBW_SKIP: "*-musllinux_* *-win32 *-manylinux_i686"
        CIBW_BEFORE_BUILD_LINUX: |
          apt-get update && apt-get install -y cmake build-essential git-lfs libvulkan-dev
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
        CIBW_BEFORE_BUILD_WINDOWS: |
          choco install cmake git-lfs
          curl --proto "=https" --tlsv1.2 -sSf https://win.rustup.rs/x86_64 -o rustup-init.exe
          rustup-init.exe -y
        CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH"
        CIBW_ENVIRONMENT_WINDOWS: PATH="$UserProfile\\.cargo\\bin;$PATH"

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform_id }}
        path: wheelhouse/*.whl

  # Job 4: Create GitHub release with wheels
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, docker-build, build-wheels]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist/
        merge-multiple: true

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

  # Job 5: Performance benchmarks (optional)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run benchmarks
      run: |
        docker run --rm \
          -v $(pwd):/workspace \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          python scripts/benchmark.py

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.json