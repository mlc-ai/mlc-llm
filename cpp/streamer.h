/*!
 *  Copyright (c) 2023 by Contributors
 * \file streamer.h
 * \brief Header of streamers in MLC LLM.
 */

#ifndef MLC_LLM_STREAMER_H_
#define MLC_LLM_STREAMER_H_

#include <tvm/runtime/object.h>

#include "tokenizers.h"

namespace mlc {
namespace llm {

using namespace tvm::runtime;

/****************** TextStreamer ******************/

/*!
 * \brief The class that streams back validated utf-8 text strings
 * that generated by tokenizer.
 */
class TextStreamerObj : public Object {
 public:
  explicit TextStreamerObj(Tokenizer tokenizer);

  /*!
   * \brief Put new delta tokens into the streamer, and get the UTF-8-valid
   * delta string. The text streamer may hold some of the input delta tokens
   * which cannot decode into valid UTF-8 strings. The returned string
   * is always guaranteed to be UTF-8 valid.
   * \param delta_tokens The new tokens to put into the streamer.
   * \return The decoded delta string after putting the input new tokens.
   */
  std::string Put(const std::vector<int32_t>& delta_tokens);

  /*! \brief Return the string decoded by remaining tokens. */
  std::string Finish();

  // REPLACEMENT CHARACTER (U+FFFD) in UTF-8.
  static constexpr const char* kReplacementCharacter = "\xef\xbf\xbd";

  static constexpr const char* _type_key = "mlc.TextStreamer";
  static constexpr const bool _type_has_method_sequal_reduce = false;
  static constexpr const bool _type_has_method_shash_reduce = false;
  TVM_DECLARE_BASE_OBJECT_INFO(TextStreamerObj, Object);

 private:
  Tokenizer tokenizer_;
  std::vector<int32_t> prefix_tokens_;
  std::vector<int32_t> pending_tokens_;
  bool finished_ = false;
};

/*!
 * \brief Managed reference to TextStreamerObj
 * \sa TextStreamerObj
 */
class TextStreamer : public ObjectRef {
 public:
  /*! \brief Construct a text streamer with tokenizer. */
  explicit TextStreamer(Tokenizer tokenizer);

  TVM_DEFINE_MUTABLE_OBJECT_REF_METHODS(TextStreamer, ObjectRef, TextStreamerObj);
};

/****************** StopStrHandler ******************/

/*!
 * \brief The stop string handler in MLC LLM, which takes input delta text
 * one at a time, and return the output delta text before stopping due to
 * stop strings.
 */
class StopStringHandlerObj : public Object {
 public:
  explicit StopStringHandlerObj(std::vector<std::string> stop_strs);

  /*!
   * \brief Add new input delta text to the handler, return output
   * delta text before stopping. The stop string handler may hold
   * some of the input delta text which may be part of a stop string.
   * The returned string is always guaranteed not to be part of stop string.
   */
  std::string Put(std::string input_delta_str);

  /*! \brief Stop string handling has finished, return remaining string. */
  std::string Finish();

  /*! \brief Check if the generation has stopped due to stop string. */
  bool StopTriggered() { return stop_triggered_; }

  static constexpr const char* _type_key = "mlc.StopStringHandler";
  TVM_DECLARE_FINAL_OBJECT_INFO(StopStringHandlerObj, Object);

 private:
  std::vector<std::string> stop_strs_;
  int max_stop_str_length_;
  std::string pending_str_ = "";
  bool stop_triggered_ = false;
};

/*!
 * \brief Managed reference to StopStringHandlerObj
 * \sa StopStringHandlerObj
 */
class StopStringHandler : public ObjectRef {
 public:
  explicit StopStringHandler(std::vector<std::string> stop_strs);

  TVM_DEFINE_MUTABLE_OBJECT_REF_METHODS(StopStringHandler, ObjectRef, StopStringHandlerObj);
};

}  // namespace llm
}  // namespace mlc

#endif  // MLC_LLM_STREAMER_H_
