# Makefile - Docker-First Development Workflow for MLC-LLM
# Works on any host OS without local dependencies

.PHONY: help build build-dev build-prod test test-unit test-integration lint format clean docker-up docker-down setup

# Docker configuration
DOCKER_COMPOSE ?= docker compose
IMAGE_NAME ?= mlc-llm
REGISTRY ?= ghcr.io
BUILD_CONTEXT ?= .

# Default target
help: ## Show this help message
	@echo "MLC-LLM Docker-First Development Makefile"
	@echo "Works on macOS, Linux, and Windows without local dependencies"
	@echo ""
	@echo "Prerequisites:"
	@echo "  - Docker Desktop or Docker Engine"
	@echo "  - Docker Compose"
	@echo "  - Git (with submodules cloned)"
	@echo ""
	@echo "Quick Start:"
	@echo "  make setup     # One-time setup"
	@echo "  make dev-up    # Start development environment"
	@echo "  make shell     # Open development shell"
	@echo ""
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-20s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Prerequisites check
check-docker: ## Check if Docker is available
	@echo "Checking Docker installation..."
	@docker --version >/dev/null 2>&1 || (echo "❌ Docker not found. Please install Docker Desktop." && exit 1)
	@docker compose version >/dev/null 2>&1 || (echo "❌ Docker Compose not found. Please update Docker." && exit 1)
	@echo "✅ Docker is available"

check-git: ## Check if git submodules are initialized
	@echo "Checking git submodules..."
	@git submodule status | grep -q "^-" && echo "❌ Git submodules not initialized. Run 'git submodule update --init --recursive'" && exit 1 || echo "✅ Git submodules ready"

# Setup and initialization
setup: check-docker check-git ## One-time setup (run this first)
	@echo "Setting up MLC-LLM development environment..."
	@echo "This will take several minutes on first run..."
	$(MAKE) build-dev
	@echo "✅ Setup complete! Run 'make dev-up' to start development."

# Build targets
build-base: ## Build base image only
	@echo "Building base image..."
	docker build \
		--target base \
		--tag $(IMAGE_NAME):base \
		$(BUILD_CONTEXT)

build-dev: check-docker ## Build development image
	@echo "Building development Docker image..."
	docker build \
		--target development \
		--tag $(IMAGE_NAME):dev \
		$(BUILD_CONTEXT)

build-prod: check-docker ## Build production image
	@echo "Building production Docker image..."
	docker build \
		--target production \
		--tag $(IMAGE_NAME):prod \
		$(BUILD_CONTEXT)

build-all: build-dev build-prod ## Build all images

# Multi-platform builds
build-multi: check-docker ## Build multi-platform images (requires buildx)
	@echo "Building multi-platform images..."
	docker buildx create --use --name mlc-builder 2>/dev/null || true
	docker buildx build \
		--platform linux/amd64,linux/arm64 \
		--target development \
		--tag $(IMAGE_NAME):dev \
		--load \
		$(BUILD_CONTEXT)
	docker buildx build \
		--platform linux/amd64,linux/arm64 \
		--target production \
		--tag $(IMAGE_NAME):prod \
		--load \
		$(BUILD_CONTEXT)

# Development environment
dev-up: check-docker ## Start development environment
	@echo "Starting development environment..."
	$(DOCKER_COMPOSE) up -d

dev-down: ## Stop development environment
	@echo "Stopping development environment..."
	$(DOCKER_COMPOSE) down

dev-logs: ## Show development environment logs
	$(DOCKER_COMPOSE) logs -f

dev-restart: dev-down dev-up ## Restart development environment

dev-rebuild: dev-down ## Rebuild and restart development environment
	@echo "Rebuilding development environment..."
	$(DOCKER_COMPOSE) build --no-cache
	$(DOCKER_COMPOSE) up -d

# Container interaction
shell: ## Open bash shell in development container
	@echo "Opening shell in development container..."
	@if ! docker ps --format "table {{.Names}}" | grep -q mlc-dev; then \
		echo "Development container not running. Starting it..."; \
		$(MAKE) dev-up; \
		sleep 5; \
	fi
	docker exec -it mlc-dev /bin/bash

root-shell: ## Open root shell in development container (for debugging)
	docker exec -it --user root mlc-dev /bin/bash

jupyter: ## Start Jupyter Lab in development container
	@echo "Starting Jupyter Lab..."
	@echo "Access at: http://localhost:8888"
	docker exec -d mlc-dev jupyter lab \
		--ip=0.0.0.0 \
		--port=8888 \
		--no-browser \
		--allow-root \
		--NotebookApp.token='' \
		--NotebookApp.password=''

# Testing - all run inside containers
test: test-unit test-integration ## Run all tests in container

test-unit: ## Run unit tests in container
	@echo "Running unit tests in container..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python -m pytest tests/unit/ -v --cov=mlc_llm --cov-report=term"

test-integration: ## Run integration tests in container
	@echo "Running integration tests in container..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python -m pytest tests/integration/ -v"

test-fast: ## Run fast tests only (no GPU required)
	@echo "Running fast tests in container..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python -m pytest tests/ -v -m 'not slow and not gpu'"

test-gpu: ## Run GPU tests (requires nvidia-docker)
	@echo "Running GPU tests in container..."
	docker run --rm --gpus all \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python -m pytest tests/ -v -m gpu"

test-coverage: ## Generate test coverage report
	@echo "Generating test coverage report..."
	docker run --rm \
		-v $(PWD):/workspace \
		-v $(PWD)/htmlcov:/workspace/htmlcov \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python -m pytest tests/ --cov=mlc_llm --cov-report=html --cov-report=xml"
	@echo "Coverage report generated in htmlcov/"

# Code quality - all run inside containers
lint: ## Run linting checks in container
	@echo "Running linting checks in container..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && black --check python/ && isort --check-only python/ && pylint python/mlc_llm/ && mypy python/mlc_llm/"

format: ## Format code in container
	@echo "Formatting code in container..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && black python/ && isort python/"

format-check: ## Check code formatting without changes
	@echo "Checking code formatting..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && black --check --diff python/ && isort --check-only --diff python/"

# Build MLC-LLM inside container
build-mlc: ## Build MLC-LLM inside container
	@echo "Building MLC-LLM inside development container..."
	docker run --rm \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && mkdir -p build && cd build && python ../cmake/gen_cmake_config.py && cmake .. && make -j\$$(nproc)"

compile-model: ## Compile a test model inside container
	@echo "Compiling test model inside container..."
	docker run --rm --gpus all \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python -m mlc_llm compile HF://mlc-ai/Llama-2-7b-chat-hf-q4f16_1-MLC --device cuda"

# Production testing
prod-test: ## Test production image
	@echo "Testing production image..."
	docker run --rm $(IMAGE_NAME):prod --help

prod-run: ## Run production container
	@echo "Running production container..."
	docker run --rm -it --gpus all \
		-p 8000:8000 \
		$(IMAGE_NAME):prod \
		serve --host 0.0.0.0 --port 8000

# Development utilities
logs: ## Show all container logs
	$(DOCKER_COMPOSE) logs

ps: ## Show running containers
	$(DOCKER_COMPOSE) ps

top: ## Show container resource usage
	docker stats

inspect: ## Inspect development image
	docker run --rm $(IMAGE_NAME):dev python -c "import sys; print('Python:', sys.version); import mlc_llm; print('MLC-LLM imported successfully')"

# Benchmarking
benchmark: ## Run performance benchmarks in container
	@echo "Running benchmarks in container..."
	docker run --rm --gpus all \
		-v $(PWD):/workspace \
		$(IMAGE_NAME):dev \
		bash -c "cd /workspace && python scripts/benchmark.py --output benchmark-results.json"

# Registry operations
push-dev: ## Push development image to registry
	docker tag $(IMAGE_NAME):dev $(REGISTRY)/$(IMAGE_NAME):dev
	docker push $(REGISTRY)/$(IMAGE_NAME):dev

push-prod: ## Push production image to registry
	docker tag $(IMAGE_NAME):prod $(REGISTRY)/$(IMAGE_NAME):prod
	docker push $(REGISTRY)/$(IMAGE_NAME):prod

pull-dev: ## Pull development image from registry
	docker pull $(REGISTRY)/$(IMAGE_NAME):dev
	docker tag $(REGISTRY)/$(IMAGE_NAME):dev $(IMAGE_NAME):dev

pull-prod: ## Pull production image from registry
	docker pull $(REGISTRY)/$(IMAGE_NAME):prod
	docker tag $(REGISTRY)/$(IMAGE_NAME):prod $(IMAGE_NAME):prod

# Cleanup
clean: ## Clean up containers and volumes
	@echo "Cleaning up containers and volumes..."
	$(DOCKER_COMPOSE) down -v
	docker system prune -f

clean-images: ## Remove all MLC-LLM images
	@echo "Removing MLC-LLM images..."
	docker rmi $(IMAGE_NAME):dev $(IMAGE_NAME):prod $(IMAGE_NAME):base 2>/dev/null || true

clean-all: clean clean-images ## Clean everything
	@echo "Cleaning everything..."
	docker system prune -af

# CI/CD simulation
ci-test: ## Simulate CI pipeline locally
	@echo "Simulating CI pipeline..."
	$(MAKE) build-dev
	$(MAKE) format-check
	$(MAKE) lint
	$(MAKE) test-fast
	@echo "✅ CI simulation passed!"

ci-full: ## Full CI simulation with all tests
	@echo "Running full CI simulation..."
	$(MAKE) build-all
	$(MAKE) format-check
	$(MAKE) lint
	$(MAKE) test
	$(MAKE) prod-test
	@echo "✅ Full CI simulation passed!"

# Platform checks
platform-check: ## Check platform compatibility
	@echo "Platform Information:"
	@echo "Host OS: $$(uname -s)"
	@echo "Host Arch: $$(uname -m)"
	@echo "Docker Version: $$(docker --version)"
	@echo "Docker Compose Version: $$(docker compose version)"
	@echo ""
	@echo "Container Platform Check:"
	docker run --rm $(IMAGE_NAME):dev uname -a

# Quick development commands
dev: dev-up shell ## Start development and open shell (convenience)

quick-test: ## Quick test without rebuilding
	docker run --rm -v $(PWD):/workspace $(IMAGE_NAME):dev bash -c "cd /workspace && python -c 'import mlc_llm; print(\"✅ MLC-LLM works!\")'"

# Help for first-time users
first-time: ## First-time setup guide
	@echo "🚀 MLC-LLM Docker-First Development Setup"
	@echo ""
	@echo "This setup works on macOS, Linux, and Windows without local dependencies!"
	@echo ""
	@echo "Prerequisites:"
	@echo "  1. Install Docker Desktop: https://www.docker.com/products/docker-desktop/"
	@echo "  2. Clone MLC-LLM with submodules:"
	@echo "     git clone --recursive https://github.com/mlc-ai/mlc-llm.git"
	@echo ""
	@echo "Quick Start:"
	@echo "  1. make setup      # One-time setup (builds Docker images)"
	@echo "  2. make dev        # Start development environment and shell"
	@echo "  3. make test-fast  # Run tests to verify everything works"
	@echo ""
	@echo "Useful commands:"
	@echo "  make help         # Show all available commands"
	@echo "  make jupyter      # Start Jupyter Lab"
	@echo "  make shell        # Open development shell"
	@echo "  make test         # Run all tests"
	@echo ""
	@echo "For more help: https://github.com/mlc-ai/mlc-llm/docs"