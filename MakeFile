# Makefile - Development workflow automation for MLC-LLM

.PHONY: help build build-dev build-prod test test-unit test-integration lint format clean docker-up docker-down install-dev

# Default target
help: ## Show this help message
	@echo "MLC-LLM Development Makefile"
	@echo "Usage: make [target]"
	@echo ""
	@echo "Available targets:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-20s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Environment variables
PYTHON ?= python
PYTEST ?= pytest
DOCKER_COMPOSE ?= docker-compose
BUILD_DIR ?= build
IMAGE_NAME ?= mlc-llm

# Build targets
build: ## Build MLC-LLM from source
	@echo "Building MLC-LLM..."
	mkdir -p $(BUILD_DIR)
	cd $(BUILD_DIR) && \
	$(PYTHON) ../cmake/gen_cmake_config.py && \
	cmake .. && \
	cmake --build . --parallel $$(nproc || echo 4)

build-dev: ## Build development Docker image
	@echo "Building development Docker image..."
	docker build --target development -t $(IMAGE_NAME):dev .

build-prod: ## Build production Docker image
	@echo "Building production Docker image..."
	docker build --target production -t $(IMAGE_NAME):prod .

build-multi: ## Build multi-platform Docker images
	@echo "Building multi-platform Docker images..."
	docker buildx build --platform linux/amd64,linux/arm64 --target development -t $(IMAGE_NAME):dev .
	docker buildx build --platform linux/amd64,linux/arm64 --target production -t $(IMAGE_NAME):prod .

# Installation targets
install-dev: ## Install development dependencies
	@echo "Installing development dependencies..."
	conda env create -f environment-dev.yml || conda env update -f environment-dev.yml
	@echo "Activating environment and installing pre-commit hooks..."
	bash -c "source $$(conda info --base)/etc/profile.d/conda.sh && \
	         conda activate mlc-dev && \
	         pre-commit install"

install-prod: ## Install production dependencies only
	@echo "Installing production dependencies..."
	conda env create -f environment-prod.yml || conda env update -f environment-prod.yml

# Testing targets
test: test-unit test-integration ## Run all tests

test-unit: ## Run unit tests
	@echo "Running unit tests..."
	$(PYTEST) tests/unit/ -v --cov=mlc_llm --cov-report=html --cov-report=term

test-integration: ## Run integration tests
	@echo "Running integration tests..."
	$(PYTEST) tests/integration/ -v

test-fast: ## Run fast tests only (excluding slow tests)
	@echo "Running fast tests..."
	$(PYTEST) tests/ -v -m "not slow"

test-gpu: ## Run GPU-specific tests
	@echo "Running GPU tests..."
	$(PYTEST) tests/ -v -m "gpu"

test-coverage: ## Generate test coverage report
	@echo "Generating coverage report..."
	$(PYTEST) tests/ --cov=mlc_llm --cov-report=html --cov-report=xml
	@echo "Coverage report generated in htmlcov/"

# Code quality targets
lint: ## Run linting checks
	@echo "Running linting checks..."
	black --check python/
	isort --check-only python/
	pylint python/mlc_llm/
	mypy python/mlc_llm/

format: ## Format code
	@echo "Formatting code..."
	black python/
	isort python/

format-check: ## Check code formatting without making changes
	@echo "Checking code formatting..."
	black --check --diff python/
	isort --check-only --diff python/

# Docker development targets
docker-up: ## Start development environment with Docker Compose
	@echo "Starting development environment..."
	$(DOCKER_COMPOSE) up -d

docker-down: ## Stop development environment
	@echo "Stopping development environment..."
	$(DOCKER_COMPOSE) down

docker-logs: ## Show Docker container logs
	$(DOCKER_COMPOSE) logs -f

docker-shell: ## Open shell in development container
	$(DOCKER_COMPOSE) exec mlc-dev /bin/bash

docker-rebuild: ## Rebuild and restart Docker containers
	@echo "Rebuilding Docker containers..."
	$(DOCKER_COMPOSE) down
	$(DOCKER_COMPOSE) build --no-cache
	$(DOCKER_COMPOSE) up -d

# Jupyter targets
jupyter: ## Start Jupyter lab in container
	$(DOCKER_COMPOSE) exec mlc-dev jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root

# Monitoring targets
monitor-up: ## Start monitoring stack (Prometheus + Grafana)
	@echo "Starting monitoring stack..."
	$(DOCKER_COMPOSE) up -d prometheus grafana

monitor-down: ## Stop monitoring stack
	$(DOCKER_COMPOSE) stop prometheus grafana

# Benchmark targets
benchmark: ## Run performance benchmarks
	@echo "Running benchmarks..."
	$(PYTHON) scripts/benchmark.py --output benchmark-results.json

benchmark-docker: ## Run benchmarks in Docker
	docker run --rm --gpus all \
		-v $$(pwd):/workspace \
		$(IMAGE_NAME):prod \
		python scripts/benchmark.py

# Release targets
release-test: ## Test release build process
	@echo "Testing release build..."
	$(PYTHON) -m build
	$(PYTHON) -m twine check dist/*

release-wheels: ## Build Python wheels
	@echo "Building Python wheels..."
	$(PYTHON) -m cibuildwheel --output-dir wheelhouse

# Cleanup targets
clean: ## Clean build artifacts
	@echo "Cleaning build artifacts..."
	rm -rf $(BUILD_DIR)
	rm -rf dist/
	rm -rf wheelhouse/
	rm -rf *.egg-info/
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .pytest_cache -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete

clean-docker: ## Clean Docker images and volumes
	@echo "Cleaning Docker resources..."
	docker system prune -f
	docker volume prune -f

clean-all: clean clean-docker ## Clean everything

# Documentation targets
docs: ## Build documentation
	@echo "Building documentation..."
	cd docs && make html

docs-serve: ## Serve documentation locally
	@echo "Serving documentation..."
	cd docs/_build/html && python -m http.server 8080

# Pre-commit targets
pre-commit: ## Run pre-commit hooks
	pre-commit run --all-files

pre-commit-install: ## Install pre-commit hooks
	pre-commit install

# CI/CD simulation targets
ci-test: ## Simulate CI testing pipeline
	@echo "Simulating CI pipeline..."
	make lint
	make test-fast
	make build

ci-full: ## Full CI simulation including Docker builds
	@echo "Running full CI simulation..."
	make lint
	make test
	make build-dev
	make build-prod

# Development workflow targets
dev-setup: install-dev pre-commit-install ## Complete development setup
	@echo "Development environment setup complete!"
	@echo "To get started:"
	@echo "  1. conda activate mlc-dev"
	@echo "  2. make docker-up"
	@echo "  3. Open http://localhost:8888 for Jupyter"

dev-check: ## Quick development environment check
	@echo "Checking development environment..."
	conda info --envs | grep mlc-dev || echo "❌ mlc-dev environment not found"
	which pre-commit >/dev/null && echo "✅ pre-commit installed" || echo "❌ pre-commit not found"
	docker --version >/dev/null && echo "✅ Docker available" || echo "❌ Docker not found"
	docker-compose --version >/dev/null && echo "✅ Docker Compose available" || echo "❌ Docker Compose not found"

# Security targets
security-scan: ## Run security vulnerability scans
	@echo "Running security scans..."
	docker run --rm -v $$(pwd):/workspace \
		aquasecurity/trivy fs /workspace
	
security-scan-docker: ## Scan Docker images for vulnerabilities
	@echo "Scanning Docker images..."
	docker run --rm \
		aquasecurity/trivy image $(IMAGE_NAME):dev
	docker run --rm \
		aquasecurity/trivy image $(IMAGE_NAME):prod