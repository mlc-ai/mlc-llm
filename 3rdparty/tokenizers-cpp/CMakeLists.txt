# update to contain more rust flags
set(TOKENIZERS_CPP_RUST_FLAGS "")
set(TOKENIZERS_CPP_CARGO_TARGET "")

# extra link libraries
set(TOKENIZERS_CPP_LINK_LIBS "")

if (CMAKE_SYSTEM_NAME STREQUAL "iOS")
  set(TOKENIZERS_CPP_CARGO_TARGET aarch64-apple-ios)
  # add extra depdnency needed for rust tokenizer in iOS
  find_library(FOUNDATION_LIB Foundation)
  find_library(SECURITY_LIB Security)
  list(APPEND TOKENIZERS_CPP_LINK_LIBS ${FOUNDATION_LIB} ${SECURITY_LIB})
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
  if (CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
    set(TOKENIZERS_CPP_CARGO_TARGET aarch64-apple-darwin)
  endif()
elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
  set(TOKENIZERS_CPP_CARGO_TARGET x86_64-pc-windows-msvc)
endif()

if(WIN32)
  list(APPEND TOKENIZERS_CPP_LINK_LIBS
    wsock32 ws2_32 Bcrypt
    iphlpapi userenv psapi
  )
endif()

set(TOKENIZERS_CPP_CARGO_FLAGS "")
set(TOKENIZERS_CPP_CARGO_TARGET_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(TOKENIZERS_CPP_CARGO_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})

if (NOT TOKENIZERS_CPP_CARGO_TARGET STREQUAL "")
    list(APPEND TOKENIZERS_CPP_CARGO_FLAGS --target ${TOKENIZERS_CPP_CARGO_TARGET})
    set(TOKENIZERS_CPP_CARGO_BINARY_DIR
        "${TOKENIZERS_CPP_CARGO_BINARY_DIR}/${TOKENIZERS_CPP_CARGO_TARGET}")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(TOKENIZERS_CPP_CARGO_BINARY_DIR "${TOKENIZERS_CPP_CARGO_BINARY_DIR}/debug")
else ()
    list(APPEND TOKENIZERS_CPP_CARGO_FLAGS --release)
    set(TOKENIZERS_CPP_CARGO_BINARY_DIR "${TOKENIZERS_CPP_CARGO_BINARY_DIR}/release")
endif ()

get_filename_component(TOKENIZERS_CPP_CARGO_SOURCE_PATH ${CMAKE_CURRENT_LIST_FILE} DIRECTORY)

if(MSVC)
  set(TOKENIZERS_CPP_LIB "${TOKENIZERS_CPP_CARGO_BINARY_DIR}/tokenizers_cpp.lib")
else()
  set(TOKENIZERS_CPP_LIB "${TOKENIZERS_CPP_CARGO_BINARY_DIR}/libtokenizers_cpp.a")
endif()
set(TOKENIZERS_CPP_INCLUDE ${TOKENIZERS_CPP_CARGO_SOURCE_PATH})

# NOTE: need to use cmake -E env to be portable in win

add_custom_command(
  OUTPUT ${TOKENIZERS_CPP_LIB}
  COMMAND
  ${CMAKE_COMMAND} -E env
  CARGO_TARGET_DIR=${TOKENIZERS_CPP_CARGO_TARGET_DIR}
  RUSTFLAGS="${TOKENIZERS_CPP_RUST_FLAGS}"
  cargo build ${TOKENIZERS_CPP_CARGO_FLAGS}
  WORKING_DIRECTORY ${TOKENIZERS_CPP_CARGO_SOURCE_PATH}
  POST_BUILD COMMAND
  ${CMAKE_COMMAND} -E copy
  ${TOKENIZERS_CPP_LIB} "${CMAKE_CURRENT_BINARY_DIR}"
)

add_library(tokenizers INTERFACE ${TOKENIZERS_CPP_LIB})
target_link_libraries(tokenizers INTERFACE ${TOKENIZERS_CPP_LIB} ${TOKENIZERS_CPP_LINK_LIBS})
target_include_directories(tokenizers INTERFACE ${TOKENIZERS_CPP_INCLUDE})
